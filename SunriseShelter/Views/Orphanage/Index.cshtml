@model PaginatedList<SunriseShelter.Models.Orphanage>

@{
    ViewData["Title"] = "Index";
}

<h1>Orphanages</h1>

@if (User.IsInRole("Admin"))
{
    <p>
        <a class="btn btn-success" asp-action="Create">Create New</a>
    </p>
}
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />      <!-- This will show the filtering searchbox, thus making it functional-->
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a class="btn btn-default" asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>
@if (!Model.Any())
{
    <div class="alert alert-secondary border-0 rounded shadow-sm" role="alert">
        "@ViewData["CurrentFilter"]" is not in the record.
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index"
                       asp-route-sortOrder="@ViewData["NameSortParm"]"
                       class="custom-hover-link">
                        Name
                    </a>
                </th>
                <th>
                    Address
                </th>
                <th>
                    State
                </th>
                <th>
                    Country
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Name)</td>
                    <td>@Html.DisplayFor(modelItem => item.Address)</td>
                    <td>@Html.DisplayFor(modelItem => item.State)</td>
                    <td>@Html.DisplayFor(modelItem => item.Country)</td>
                    <td>
                        @if (User.IsInRole("Admin"))
                        {
                            <a class="btn btn-outline-dark" asp-action="Edit" asp-route-id="@item.OrphanageId">Edit</a>
                        }
                        <a class="btn btn-outline-dark" asp-action="Details" asp-route-id="@item.OrphanageId">Details</a>
                        @if (User.IsInRole("Admin"))
                        {
                            <a class="btn btn-outline-danger" asp-action="Delete" asp-route-id="@item.OrphanageId">Delete</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@{
    <!-- This is for the pagination for the appointment times page, it will display the previous and next page and will make it functional-->
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>